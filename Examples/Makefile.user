# BEWARE
# This file must be renamed into Makefile.inc in order to work!!
#

# This is the user defined part of the Makefile
#
# It has been modified so to read from environmental variables.
#
# Change it to suit your need

# The directory where the examples reside
PACS_ROOT=/home/forma/PacsVirtualMachine/pacs/PACSCourse/Material/Examples
# The directory with the Eigen (leave blank if they are in a standard directory)
EIGEN_DIR=$(mkEigenInc)
#EIGEN_DIR=/usr/local/include/eigen3/

OTHER_LIB_DIR=
OTHER_INC_DIR=
#
# You need trilinos at least 10.10
#
TRILINOS_LIBDIR=-L/home/forma/lifev-env/trilinos-install/lib
TRILINOS_INCDIR=-I/home/forma/lifev-env/trilinos-install/include
#
# Some istallations add tilinos_ to the name of the libraries
# i.e. libtrilinos_teuchos.so. In that case set TRILINOS_SUFFIX=trilinos_
# The
TRILINOS_SUFFIX=# To make sure there is no space!
#
# Mpi directories for library and includes
#
MPI_LIBDIR=${mkOpenmpiLib}
MPI_INCDIR=${mkOpenmpiInc}

#
# Name of additional libraries
#
LIBRARIES=

#
# The C++ compiler
#
#CXX = g++ 
#CXX = icc
CXX = /opt/clang3.5/bin
CXX = ${mkCxxCompiler}
#
# Since we are only uning c++ I set CC=CXX so that the linker LINK.o is correct
# make has no separate macro for the linker!
# If you need C to compiler but you still need the c++ linker do
#CC=your favourite C compiler
# do
#LINK.o = $(LINK.cc)
#LINK.o = $(CXX) $(LDFLAGS) $(TARGET_ARCH)
#
CC=$(CXX)
#
# Se CXX=icc for intel compiler
#
ifeq ($(findstring icc, $(CXX)),icc)
inteldir=$(dir $(CXX))
OTHER_LIB_DIR+=/usr/local/opt/intel/cc/9.0/lib
endif
#
# Se CXX=clang for clang compiler
#
ifeq ($(findstring clang, $(CXX)),clang)
OTHER_LIB_DIR+=/opt/clang3.5/lib
endif
#
#  DEFINES: Possible -DXX statements
# Example
# -DNDEBUG disactivates asserts
DEFINES=
#
#
# Warning flags: Level of warning
#
WARNFLAGS=-Wall
#
# Optimization flags : May be selected by using the variable RELEASE
#
# -c       compile only, generate corresponding .o files
# -g       generate code suitable for the debugger
# -p       generate code suitable for the profiler
# -O       attemp code optimizations
#
ifdef RELEASE
OPTFLAGS = -O3
DEFINES+=-DNDEBUG
DEBUG=no
else
OPTFLAGS = -g
DEBUG=yes
endif

ifeq ($(DEBUG),yes)
  OPTFLAGS=-g
  LDFLAGS+=-Wl,-rpath=.# If debug we use the local dynamic libraries
else
  OPTFLAGS=-O3
  CPPFLAGS+=-DNDEBUG
endif

#
# Flags for standard
#
ifeq ($(findstring clang, $(CXX)),clang)
STANDARD=c++11
# if you want c++14
#STANDARD=c++14
else
STANDARD=c++11
endif
export STDFLAGS=-std=$(STANDARD)
##
#  END USER MODIFIABLE PART
##
#
# PACS libraries are stored here
#
export PACS_LIB_DIR=$(PACS_ROOT)/lib
#
# Main PACS include directory
#
export PACS_INC_DIR=$(PACS_ROOT)/include
#
# Other directories with libraries (if needed)
#
export OTHER_LIB_DIR
#
# Other include directories (if needed)
#
export OTHER_INC_DIR
export CC
export CXX
# 
# Location of
# Doxygen configuration file
#
export DOXYFILE=$(PACS_ROOT)/DoxyfileCommon
#
# Compose options
#
# collect all includes
ALL_INC_DIR= $(PACS_INC_DIR) $(OTHER_INC_DIR) $(EIGEN_DIR)
includes := $(foreach inc,$(ALL_INC_DIR),-I$(inc) )
# where to look for include files:
# first the current directory, then the directory ./include
# and then the possible other specifyed in OTHER_INC_DIR
INCLS  = -I. -I./include $(includes) 
# collect all library dirs
ALL_LIB_DIR=$(PACS_LIB_DIR) $(OTHER_LIB_DIR)
LIBD := $(foreach lib,$(ALL_LIB_DIR),-L$(lib) )
#
# Set make macros
#
export CPPFLAGS=$(INCLS) $(DEFINES)
export CXXFLAGS=$(OPTFLAGS) $(STDFLAGS) $(WARNFLAGS)
#
# For C Programs 
#
export CCFLAGS=$(CXXFLAGS)
#
# name of file with dependencies
#
#header files
export LDFLAGS+=$(OPTFLAGS) 
#export LDLIBS=$(LIBRARIES)
export DEPEND=make.dep

